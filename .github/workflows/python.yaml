name: Performance Testing

on:
  push

jobs:
  performance_test:
    runs-on: ubuntu-latest
    env:
      JMETER_THREADS: 10
      JMETER_DURATION: 60
      JMETER_PATH: 'Performance/sample.jmx'
      WORKING_DIRECTORY: Performance

   
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11 for x64
        uses: actions/setup-java@v4
        with:
          java-version: '16'
          distribution: 'temurin'
          architecture: x64

      - name: Checkout code
        uses: actions/checkout@v4
      - name: setup python and aws cli
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install awscli
          sudo apt-get install -y jq python3 python3-pip
          pip install -r requirements.txt

      - name: Setup-Jmeter
        run: |
          sudo apt-get update
          sudo apt install curl -y
          sudo apt install -y default-jdk
          sudo curl -O https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.5.tgz
          sudo tar -xvf apache-jmeter-5.5.tgz
          cd $GITHUB_WORKSPACE/apache-jmeter-5.5/lib && sudo curl -O https://repo1.maven.org/maven2/kg/apc/cmdrunner/2.2.1/cmdrunner-2.2.1.jar
          cd $GITHUB_WORKSPACE/apache-jmeter-5.5/lib/ext && sudo curl -O https://repo1.maven.org/maven2/kg/apc/jmeter-plugins-manager/1.6/jmeter-plugins-manager-1.6.jar
          cd $GITHUB_WORKSPACE/apache-jmeter-5.5/lib && sudo java -jar cmdrunner-2.2.1.jar --tool org.jmeterplugins.repository.PluginManagerCMD install jpgc-synthesis,jpgc-graphs-basic,jpgc-graphs-additional,jpgc-cmd,jpgc-graphs-dist,jpgc-standard,jpgc-casutg
      - name: Install PerfMon Plugin
        run: |
          cd $GITHUB_WORKSPACE/apache-jmeter-5.5/lib
          sudo java -jar cmdrunner-2.2.1.jar --tool org.jmeterplugins.repository.PluginManagerCMD install jpgc-perfmon
         
      - name: Run Performance Tests
        run: |
          $GITHUB_WORKSPACE/apache-jmeter-5.5/bin/./jmeter.sh -Jthreads=$JMETER_THREADS -Jloadtime=$JMETER_DURATION -n -t ${{ env.WORKING_DIRECTORY }}/sample.jmx -l ${{ env.WORKING_DIRECTORY }}/result1.jtl
          
          sudo java -jar $GITHUB_WORKSPACE/apache-jmeter-5.5/lib/cmdrunner-2.2.1.jar --tool Reporter --generate-csv aggregate_report.csv --input-jtl ${{ env.WORKING_DIRECTORY }}/result1.jtl --plugin-type AggregateReport
          sudo $GITHUB_WORKSPACE/apache-jmeter-5.5/bin/./jmeter.sh -g ${{ env.WORKING_DIRECTORY }}/result1.jtl -o ${{ env.WORKING_DIRECTORY }}/graph_results -o ${{ env.WORKING_DIRECTORY }}/python_report

      # - name: Create artifacts
      #   run: |
      #     mkdir -p Performance/graph_results
      #     echo "Hello world from file B" > Performance/graph_results/result1.jtl

      - name: Upload JMeter Test Results
        uses: actions/upload-artifact@v4
        with:
          name: perf_test_results
          path: |
              result1.jtl
              aggregate_report.csv
              Performance/graph_results
      - name: Deploy JMeter HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: html_test_report
          path: |
              Performance/graph_results
          gh_token: ${{ secrets.gh_token }}
          publish_dir: ${{ env.WORKING_DIRECTORY }}/graph_results

      # - name: Download artifact perf_test_results
      #   uses: 
      #   with:
      #     name: Artifact jtl 
      #     path: Performance/downloads/result1.jtl

      - name: Filter and convert .jtl to .csv
        run: |
          # # Filter out ramp-up period and convert to CSV
          # jq 'select(.timeStamp > 0)' result1.jtl > filtered_results.jtl
          # # Convert filtered_results.jtl to CSV
          # jq -r '[.timeStamp, .elapsed, .label, .responseCode, .responseMessage, .success, .bytes, .sentBytes, .grpThreads, .allThreads, .URL, .Latency, .IdleTime, .Connect] | @csv' filtered_results.jtl > results.csv

          # Filter out ramp-up period and convert to CSV
          PERCENTILE_90=$(jq -s 'sort_by(-timeStamp) | [int(length * 0.9)] timeStamp' ${{ env.WORKING_DIRECTORY }}/result1.jtl)
          # Filter out ramp-up period and convert to SV
          ja --argison percentile90 "$PERCENTILE_90" select(•timeStamp › $percentile90) ${{ env.WORKING_DIRECTORY }}/result1.jtl
          # Convert filtered_results.jtl to CSV
          jq -r '[.timeStamp, .elapsed, .label, .responseCode, .responseMessage, .success, .bytes, .sentBytes, .grpThreads, .allThreads, .URL, .Latency, .IdleTime, .Connect] | @csv' filtered_results.jtl > results.csv

      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: jmeter results
          path: results.csv

  comparision:
    runs-on: ubuntu-latest
    needs: performance_test
    steps:
      - name: Download Jmeter results
        uses: actions/download-artifact@v4
        with:
          name: jmeter-results
          path: ./artifacts

      - name: Run Python comparision script 
        run: |
          python python.py ./artifacts/results.csv

      # - name: Upload report
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: comparison-report
      #     path: |
      #       Performance/python_report
      #       gh_token: ${{ secrets.gh_token }}
      #       publish_dir: ${{ env.WORKING_DIRECTORY }}/python_report


